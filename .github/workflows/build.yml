name: Build Cross-Platform CLI Tools

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - name: macos-universal
            os: macos-latest
            target: x86_64-apple-darwin

          - name: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: version
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "version=dev" >> $GITHUB_OUTPUT
        fi

    - name: Install pnpm
      uses: pnpm/action-setup@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install frontend dependencies
      run: pnpm install

    - name: Build frontend
      run: pnpm build

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.platform.target }}

    # 跨平台编译工具安装（如果需要）

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.platform.target }}

    - name: Build CLI tools
      run: cargo build --release --target ${{ matrix.platform.target }}

    - name: Create package directory
      run: mkdir -p package

    - name: Copy CLI tools (Unix)
      if: matrix.platform.os != 'windows-latest'
      run: |
        cp target/${{ matrix.platform.target }}/release/等一下 package/
        cp target/${{ matrix.platform.target }}/release/寸止 package/

    - name: Copy CLI tools (Windows)
      if: matrix.platform.os == 'windows-latest'
      run: |
        copy "target\\${{ matrix.platform.target }}\\release\\等一下.exe" package\\
        copy "target\\${{ matrix.platform.target }}\\release\\寸止.exe" package\\

    - name: Create archive (Unix)
      if: matrix.platform.os != 'windows-latest'
      run: |
        cd package
        tar -czf ../cunzhi-${{ steps.version.outputs.version }}-${{ matrix.platform.name }}.tar.gz *

    - name: Create archive (Windows)
      if: matrix.platform.os == 'windows-latest'
      run: |
        cd package
        7z a ../cunzhi-${{ steps.version.outputs.version }}-${{ matrix.platform.name }}.zip *

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cunzhi-${{ steps.version.outputs.version }}-${{ matrix.platform.name }}
        path: |
          cunzhi-${{ steps.version.outputs.version }}-${{ matrix.platform.name }}.tar.gz
          cunzhi-${{ steps.version.outputs.version }}-${{ matrix.platform.name }}.zip
        if-no-files-found: ignore

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*/cunzhi-*.tar.gz
          artifacts/*/cunzhi-*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        name: Release ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
