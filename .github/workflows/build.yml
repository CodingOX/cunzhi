name: Build CLI Tools

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build-cli:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            name: 'macos-aarch64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            name: 'macos-x86_64'
          - platform: 'ubuntu-22.04'
            args: ''
            name: 'linux-x86_64'
          - platform: 'windows-latest'
            args: ''
            name: 'windows-x86_64'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            pkg-config \
            libglib2.0-dev \
            libgtk-3-dev \
            libgdk-pixbuf2.0-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libcairo-gobject2 \
            libjavascriptcoregtk-4.1-dev \
            libasound2-dev \
            libpulse-dev \
            libjack-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Install frontend dependencies
        run: pnpm install

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0" --locked

      - name: Build with Tauri (no bundle)
        shell: bash
        run: |
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [[ "${{ matrix.args }}" == *"aarch64"* ]]; then
              cargo tauri build --target aarch64-apple-darwin --no-bundle
            else
              cargo tauri build --target x86_64-apple-darwin --no-bundle
            fi
          elif [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            cargo tauri build --no-bundle
          else
            cargo tauri build --no-bundle
          fi

      - name: Create CLI package
        shell: bash
        run: |
          mkdir -p cli-package

          # 确定目标目录
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [[ "${{ matrix.args }}" == *"aarch64"* ]]; then
              TARGET_DIR="target/aarch64-apple-darwin/release"
            else
              TARGET_DIR="target/x86_64-apple-darwin/release"
            fi
          elif [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            TARGET_DIR="target/release"
          else
            TARGET_DIR="target/release"
          fi

          # 复制二进制文件
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            cp "$TARGET_DIR/等一下.exe" cli-package/
            cp "$TARGET_DIR/寸止.exe" cli-package/
            cd cli-package
            7z a ../cunzhi-cli-${{ github.ref_name }}-${{ matrix.name }}.zip *
          else
            cp "$TARGET_DIR/等一下" cli-package/
            cp "$TARGET_DIR/寸止" cli-package/
            cd cli-package
            tar -czf ../cunzhi-cli-${{ github.ref_name }}-${{ matrix.name }}.tar.gz *
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cunzhi-cli-${{ matrix.name }}
          path: |
            cunzhi-cli-*.tar.gz
            cunzhi-cli-*.zip
          if-no-files-found: ignore

  release:
    name: Create Release
    needs: build-cli
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate changelog
      id: changelog
      run: |
        # 获取上一个tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1)
        CURRENT_TAG=${{ github.ref_name }}

        echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT

        # 如果没有上一个tag，使用第一个commit
        if [ -z "$PREVIOUS_TAG" ]; then
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi

        # 生成changelog
        echo "## 📋 更新日志" > changelog.md
        echo "" >> changelog.md

        # 获取commits并分类
        FEAT_COMMITS=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD | grep -E "^- (feat|feature)" || true)
        FIX_COMMITS=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD | grep -E "^- (fix|bugfix)" || true)
        PERF_COMMITS=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD | grep -E "^- (perf|performance)" || true)
        DOCS_COMMITS=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD | grep -E "^- (docs|doc)" || true)
        STYLE_COMMITS=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD | grep -E "^- (style|ui)" || true)
        REFACTOR_COMMITS=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD | grep -E "^- (refactor|refact)" || true)
        CHORE_COMMITS=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD | grep -E "^- (chore|build|ci)" || true)
        OTHER_COMMITS=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD | grep -vE "^- (feat|feature|fix|bugfix|perf|performance|docs|doc|style|ui|refactor|refact|chore|build|ci)" || true)

        # 添加新功能
        if [ ! -z "$FEAT_COMMITS" ]; then
          echo "### ✨ 新功能" >> changelog.md
          echo "$FEAT_COMMITS" | sed 's/^- (feat|feature)[(:]/- /' >> changelog.md
          echo "" >> changelog.md
        fi

        # 添加修复
        if [ ! -z "$FIX_COMMITS" ]; then
          echo "### 🐛 问题修复" >> changelog.md
          echo "$FIX_COMMITS" | sed 's/^- (fix|bugfix)[(:]/- /' >> changelog.md
          echo "" >> changelog.md
        fi

        # 添加性能优化
        if [ ! -z "$PERF_COMMITS" ]; then
          echo "### ⚡ 性能优化" >> changelog.md
          echo "$PERF_COMMITS" | sed 's/^- (perf|performance)[(:]/- /' >> changelog.md
          echo "" >> changelog.md
        fi

        # 添加重构
        if [ ! -z "$REFACTOR_COMMITS" ]; then
          echo "### ♻️ 代码重构" >> changelog.md
          echo "$REFACTOR_COMMITS" | sed 's/^- (refactor|refact)[(:]/- /' >> changelog.md
          echo "" >> changelog.md
        fi

        # 添加文档更新
        if [ ! -z "$DOCS_COMMITS" ]; then
          echo "### 📚 文档更新" >> changelog.md
          echo "$DOCS_COMMITS" | sed 's/^- (docs|doc)[(:]/- /' >> changelog.md
          echo "" >> changelog.md
        fi

        # 添加样式更新
        if [ ! -z "$STYLE_COMMITS" ]; then
          echo "### 💄 样式更新" >> changelog.md
          echo "$STYLE_COMMITS" | sed 's/^- (style|ui)[(:]/- /' >> changelog.md
          echo "" >> changelog.md
        fi

        # 添加构建/工具更新
        if [ ! -z "$CHORE_COMMITS" ]; then
          echo "### 🔧 构建/工具" >> changelog.md
          echo "$CHORE_COMMITS" | sed 's/^- (chore|build|ci)[(:]/- /' >> changelog.md
          echo "" >> changelog.md
        fi

        # 添加其他更新
        if [ ! -z "$OTHER_COMMITS" ]; then
          echo "### 📝 其他更新" >> changelog.md
          echo "$OTHER_COMMITS" >> changelog.md
          echo "" >> changelog.md
        fi

        # 如果没有任何commits，添加默认信息
        if [ -z "$FEAT_COMMITS" ] && [ -z "$FIX_COMMITS" ] && [ -z "$PERF_COMMITS" ] && [ -z "$DOCS_COMMITS" ] && [ -z "$STYLE_COMMITS" ] && [ -z "$REFACTOR_COMMITS" ] && [ -z "$CHORE_COMMITS" ] && [ -z "$OTHER_COMMITS" ]; then
          echo "- 版本发布" >> changelog.md
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*/cunzhi-cli-*.tar.gz
          artifacts/*/cunzhi-cli-*.zip
        draft: false
        prerelease: false
        generate_release_notes: false
        name: 寸止 ${{ github.ref_name }}
        body: |
          ## 🚀 CLI工具发布 ${{ github.ref_name }}

          **📦 包含内容：**
          - 寸止 MCP工具：智能代码审查交互工具
          - 等一下 MCP工具：全局记忆管理工具
          - 完整前端资源嵌入，支持直接运行UI界面

          $(cat changelog.md)

          **💻 支持平台：**
          - Windows (x86_64)
          - macOS (Intel & Apple Silicon)
          - Linux (x86_64)

          **📖 使用方法：**
          1. 下载对应平台的压缩包
          2. 解压到任意目录
          3. 直接运行 `寸止` 或 `等一下` 命令
          4. CLI工具会自动打开UI界面

          **🔗 相关链接：**
          - [项目文档](https://github.com/imhuso/cunzhi)
          - [问题反馈](https://github.com/imhuso/cunzhi/issues)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
