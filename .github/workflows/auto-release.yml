name: Auto Release (PR)

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (patch=bugfix, minor=feature, major=breaking)'
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: 'Custom version (format: x.y.z, only when custom is selected)'
        required: false
        type: string

jobs:
  prepare-release:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      new_version: ${{ steps.new_version.outputs.new }}
      version_type: ${{ steps.version_type.outputs.type }}
      current_version: ${{ steps.current_version.outputs.current }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version type from PR
        id: version_type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"

          # Determine version type based on PR labels or title
          if echo "$PR_LABELS" | grep -q "major\|breaking"; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$PR_LABELS" | grep -q "minor\|feature"; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Get current version
        id: current_version
        run: |
          if [ -f "version.json" ]; then
            VERSION=$(grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' version.json | cut -d'"' -f4)
          elif [ -f "Cargo.toml" ]; then
            VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          else
            VERSION="0.0.0"
          fi
          echo "current=$VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.current }}"
          TYPE="${{ steps.version_type.outputs.type }}"

          IFS='.' read -r major minor patch <<< "$CURRENT"

          case $TYPE in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac

          NEW_VERSION="$major.$minor.$patch"
          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "ðŸš€ Preparing to release version $NEW_VERSION (type: $TYPE)"

      - name: Display release information
        run: |
          echo "## ðŸ“‹ Release Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ steps.current_version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
          echo "**Suggested Version:** ${{ steps.new_version.outputs.new }} (type: ${{ steps.version_type.outputs.type }})" >> $GITHUB_STEP_SUMMARY
          echo "**PR Title:** ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ðŸš€ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to [Actions](https://github.com/${{ github.repository }}/actions/workflows/auto-release.yml)" >> $GITHUB_STEP_SUMMARY
          echo "2. Click **Run workflow**" >> $GITHUB_STEP_SUMMARY
          echo "3. Choose your preferred version type:" >> $GITHUB_STEP_SUMMARY
          echo "   - **patch**: Bug fixes (e.g., ${{ steps.current_version.outputs.current }} â†’ ${{ steps.new_version.outputs.new }})" >> $GITHUB_STEP_SUMMARY
          echo "   - **minor**: New features" >> $GITHUB_STEP_SUMMARY
          echo "   - **major**: Breaking changes" >> $GITHUB_STEP_SUMMARY
          echo "   - **custom**: Specify exact version" >> $GITHUB_STEP_SUMMARY
          echo "4. Click **Run workflow** to complete the release" >> $GITHUB_STEP_SUMMARY

  execute-release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          if [ -f "version.json" ]; then
            VERSION=$(grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' version.json | cut -d'"' -f4)
          elif [ -f "Cargo.toml" ]; then
            VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          else
            VERSION="0.0.0"
          fi
          echo "current=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.current }}"
          TYPE="${{ github.event.inputs.version_type }}"
          CUSTOM="${{ github.event.inputs.custom_version }}"

          # Parse current version
          IFS='.' read -r major minor patch <<< "$CURRENT"

          if [ "$TYPE" = "custom" ]; then
            if [ -z "$CUSTOM" ]; then
              echo "Error: Custom version is required when type is 'custom'"
              exit 1
            fi
            NEW_VERSION="$CUSTOM"
          else
            case $TYPE in
              "major")
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              "minor")
                minor=$((minor + 1))
                patch=0
                ;;
              "patch")
                patch=$((patch + 1))
                ;;
            esac
            NEW_VERSION="$major.$minor.$patch"
          fi

          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update version files
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new }}"
          CURRENT_DATE=$(date +"%Y-%m-%d")

          echo "Updating version to $NEW_VERSION..."

          # Update version files (same logic as manual release)
          if [ -f "version.json" ]; then
            sed -i "s/\"version\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" version.json
            sed -i "s/\"build_date\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"build_date\": \"$CURRENT_DATE\"/" version.json
            echo "Updated version.json"
          fi

          if [ -f "Cargo.toml" ]; then
            sed -i "s/^version = \"[^\"]*\"/version = \"$NEW_VERSION\"/" Cargo.toml
            echo "Updated Cargo.toml"
          fi

          if [ -f "package.json" ]; then
            sed -i "s/\"version\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" package.json
            echo "Updated package.json"
          fi

          if [ -f "tauri.conf.json" ]; then
            sed -i "s/\"version\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" tauri.conf.json
            echo "Updated tauri.conf.json"
          fi

      - name: Commit and create tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new }}"

          # Commit version updates
          git add .
          git commit -m "release: Release $NEW_VERSION"

          # Create tag
          git tag -a "v$NEW_VERSION" -m "Release $NEW_VERSION"

          # Push changes and tag
          git push origin main
          git push origin "v$NEW_VERSION"

          echo "âœ… Released version v$NEW_VERSION"
          echo "ðŸš€ GitHub Actions will automatically build and publish the release"
