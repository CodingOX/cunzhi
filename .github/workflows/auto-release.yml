name: Auto Release (PR)

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (patch=bugfix, minor=feature, major=breaking)'
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
          - cancel
      custom_version:
        description: 'Custom version (format: x.y.z, only when custom is selected)'
        required: false
        type: string
      pr_number:
        description: 'PR number (auto-filled for auto releases)'
        required: false
        type: string

jobs:
  prepare-release:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-latest
    environment: release-approval
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Get current version
        id: current_version
        run: |
          if [ -f "version.json" ]; then
            VERSION=$(grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' version.json | cut -d'"' -f4)
          elif [ -f "Cargo.toml" ]; then
            VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          else
            VERSION="0.0.0"
          fi
          echo "current=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Calculate suggested versions
        id: suggested_versions
        run: |
          CURRENT="${{ steps.current_version.outputs.current }}"
          IFS='.' read -r major minor patch <<< "$CURRENT"

          PATCH_VERSION="$major.$minor.$((patch + 1))"
          MINOR_VERSION="$major.$((minor + 1)).0"
          MAJOR_VERSION="$((major + 1)).0.0"

          echo "patch=$PATCH_VERSION" >> $GITHUB_OUTPUT
          echo "minor=$MINOR_VERSION" >> $GITHUB_OUTPUT
          echo "major=$MAJOR_VERSION" >> $GITHUB_OUTPUT

      - name: Display release information and wait for approval
        run: |
          echo "## 🚀 Release Ready - Approval Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** ${{ steps.current_version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
          echo "**PR:** #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Available Version Options" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **patch**: ${{ steps.suggested_versions.outputs.patch }} (Bug fixes)" >> $GITHUB_STEP_SUMMARY
          echo "- **minor**: ${{ steps.suggested_versions.outputs.minor }} (New features)" >> $GITHUB_STEP_SUMMARY
          echo "- **major**: ${{ steps.suggested_versions.outputs.major }} (Breaking changes)" >> $GITHUB_STEP_SUMMARY
          echo "- **custom**: Specify exact version (e.g., 1.2.3)" >> $GITHUB_STEP_SUMMARY
          echo "- **cancel**: Cancel this release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Approve** this deployment above to proceed to version selection" >> $GITHUB_STEP_SUMMARY
          echo "2. **Reject** this deployment to cancel the release" >> $GITHUB_STEP_SUMMARY
          echo "3. After approval, you'll be redirected to select version type" >> $GITHUB_STEP_SUMMARY

      - name: Trigger version selection workflow
        run: |
          echo "✅ Release approved! Opening version selection interface..."
          echo "## 🎯 Version Selection Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The workflow will now pause and wait for you to select the version type." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Available options:**" >> $GITHUB_STEP_SUMMARY
          echo "- patch: ${{ steps.suggested_versions.outputs.patch }} (Bug fixes)" >> $GITHUB_STEP_SUMMARY
          echo "- minor: ${{ steps.suggested_versions.outputs.minor }} (New features)" >> $GITHUB_STEP_SUMMARY
          echo "- major: ${{ steps.suggested_versions.outputs.major }} (Breaking changes)" >> $GITHUB_STEP_SUMMARY
          echo "- custom: Specify exact version" >> $GITHUB_STEP_SUMMARY
          echo "- cancel: Cancel this release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next:** A version selection dialog will appear automatically." >> $GITHUB_STEP_SUMMARY

      - name: Wait for version selection
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            // 触发 workflow_dispatch 事件，让用户选择版本
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'auto-release.yml',
              ref: 'main',
              inputs: {
                pr_number: '${{ github.event.pull_request.number }}'
              }
            });

            console.log('Version selection workflow triggered');

            // 等待用户输入（这里会暂停当前工作流）
            core.info('Please select version type in the triggered workflow');

            // 设置输出，让后续步骤知道需要等待
            core.setOutput('workflow_triggered', 'true');

  execute-release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check if cancelled
        if: github.event.inputs.version_type == 'cancel'
        run: |
          echo "🛑 Release cancelled by user"
          echo "## 🛑 Release Cancelled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release process has been cancelled as requested." >> $GITHUB_STEP_SUMMARY
          exit 0

      - name: Checkout code
        if: github.event.inputs.version_type != 'cancel'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setup Git
        if: github.event.inputs.version_type != 'cancel'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        if: github.event.inputs.version_type != 'cancel'
        id: current_version
        run: |
          if [ -f "version.json" ]; then
            VERSION=$(grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' version.json | cut -d'"' -f4)
          elif [ -f "Cargo.toml" ]; then
            VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          else
            VERSION="0.0.0"
          fi
          echo "current=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Calculate new version
        if: github.event.inputs.version_type != 'cancel'
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.current }}"
          TYPE="${{ github.event.inputs.version_type }}"
          CUSTOM="${{ github.event.inputs.custom_version }}"

          # Parse current version
          IFS='.' read -r major minor patch <<< "$CURRENT"

          if [ "$TYPE" = "cancel" ]; then
            echo "Release cancelled"
            exit 0
          elif [ "$TYPE" = "custom" ]; then
            if [ -z "$CUSTOM" ]; then
              echo "Error: Custom version is required when type is 'custom'"
              exit 1
            fi
            NEW_VERSION="$CUSTOM"
          else
            case $TYPE in
              "major")
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              "minor")
                minor=$((minor + 1))
                patch=0
                ;;
              "patch")
                patch=$((patch + 1))
                ;;
            esac
            NEW_VERSION="$major.$minor.$patch"
          fi

          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update version files
        if: github.event.inputs.version_type != 'cancel'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new }}"
          CURRENT_DATE=$(date +"%Y-%m-%d")

          echo "Updating version to $NEW_VERSION..."

          # Update version files (same logic as manual release)
          if [ -f "version.json" ]; then
            sed -i "s/\"version\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" version.json
            sed -i "s/\"build_date\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"build_date\": \"$CURRENT_DATE\"/" version.json
            echo "Updated version.json"
          fi

          if [ -f "Cargo.toml" ]; then
            sed -i "s/^version = \"[^\"]*\"/version = \"$NEW_VERSION\"/" Cargo.toml
            echo "Updated Cargo.toml"
          fi

          if [ -f "package.json" ]; then
            sed -i "s/\"version\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" package.json
            echo "Updated package.json"
          fi

          if [ -f "tauri.conf.json" ]; then
            sed -i "s/\"version\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" tauri.conf.json
            echo "Updated tauri.conf.json"
          fi

      - name: Commit and create tag
        if: github.event.inputs.version_type != 'cancel'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new }}"

          # Commit version updates
          git add .
          git commit -m "release: Release $NEW_VERSION"

          # Create tag
          git tag -a "v$NEW_VERSION" -m "Release $NEW_VERSION"

          # Push changes and tag
          git push origin main
          git push origin "v$NEW_VERSION"

          echo "✅ Released version v$NEW_VERSION"
          echo "🚀 GitHub Actions will automatically build and publish the release"
