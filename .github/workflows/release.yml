name: Build CLI Tools

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build-cli:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            name: 'macos-aarch64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            name: 'macos-x86_64'
          - platform: 'ubuntu-22.04'
            args: ''
            name: 'linux-x86_64'
          - platform: 'windows-latest'
            args: ''
            name: 'windows-x86_64'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            pkg-config \
            libglib2.0-dev \
            libgtk-3-dev \
            libgdk-pixbuf2.0-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libcairo-gobject2 \
            libjavascriptcoregtk-4.1-dev \
            libasound2-dev \
            libpulse-dev \
            libjack-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Install frontend dependencies
        run: pnpm install

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0" --locked

      - name: Build with Tauri (no bundle)
        shell: bash
        run: |
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [[ "${{ matrix.args }}" == *"aarch64"* ]]; then
              cargo tauri build --target aarch64-apple-darwin --no-bundle
            else
              cargo tauri build --target x86_64-apple-darwin --no-bundle
            fi
          elif [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            cargo tauri build --no-bundle
          else
            cargo tauri build --no-bundle
          fi

      - name: Create CLI package
        shell: bash
        run: |
          mkdir -p cli-package

          # 确定目标目录
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [[ "${{ matrix.args }}" == *"aarch64"* ]]; then
              TARGET_DIR="target/aarch64-apple-darwin/release"
            else
              TARGET_DIR="target/x86_64-apple-darwin/release"
            fi
          elif [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            TARGET_DIR="target/release"
          else
            TARGET_DIR="target/release"
          fi

          # 复制二进制文件
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            cp "$TARGET_DIR/等一下.exe" cli-package/
            cp "$TARGET_DIR/寸止.exe" cli-package/
            cd cli-package
            7z a ../cunzhi-cli-${{ github.ref_name }}-${{ matrix.name }}.zip *
          else
            cp "$TARGET_DIR/等一下" cli-package/
            cp "$TARGET_DIR/寸止" cli-package/
            cd cli-package
            tar -czf ../cunzhi-cli-${{ github.ref_name }}-${{ matrix.name }}.tar.gz *
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cunzhi-cli-${{ matrix.name }}
          path: |
            cunzhi-cli-*.tar.gz
            cunzhi-cli-*.zip
          if-no-files-found: ignore

  release:
    name: Create Release
    needs: build-cli
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Install git-cliff
      uses: taiki-e/install-action@git-cliff

    - name: Generate changelog
      id: changelog
      run: |
        # 生成 changelog
        git-cliff --tag ${{ github.ref_name }} --output changelog.md

        # 添加发布信息到 changelog 开头
        {
          echo "## 🚀 寸止 ${{ github.ref_name }}"
          echo ""
          echo "### 📦 包含内容"
          echo "- **寸止** - MCP服务器，智能代码审查交互"
          echo "- **等一下** - 弹窗界面，全局记忆管理"
          echo ""
          echo "### 🍺 Homebrew 安装（推荐）"
          echo "\`\`\`bash"
          echo "brew tap imhuso/cunzhi"
          echo "brew install cunzhi"
          echo "\`\`\`"
          echo ""
          echo "### 📦 预编译版本"
          echo "下载对应平台的压缩包："
          echo "- **Windows (x86_64)**: \`cunzhi-cli-${{ github.ref_name }}-windows-x86_64.zip\`"
          echo "- **macOS (Intel)**: \`cunzhi-cli-${{ github.ref_name }}-macos-x86_64.tar.gz\`"
          echo "- **macOS (Apple Silicon)**: \`cunzhi-cli-${{ github.ref_name }}-macos-aarch64.tar.gz\`"
          echo "- **Linux (x86_64)**: \`cunzhi-cli-${{ github.ref_name }}-linux-x86_64.tar.gz\`"
          echo ""
          echo "### 🔧 MCP 客户端配置"
          echo "\`\`\`json"
          echo "{"
          echo "  \"mcpServers\": {"
          echo "    \"寸止\": {"
          echo "      \"command\": \"寸止\""
          echo "    }"
          echo "  }"
          echo "}"
          echo "\`\`\`"
          echo ""
          cat changelog.md
        } > temp_changelog.md

        mv temp_changelog.md changelog.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*/cunzhi-cli-*.tar.gz
          artifacts/*/cunzhi-cli-*.zip
        draft: false
        prerelease: false
        generate_release_notes: false
        name: 寸止 ${{ github.ref_name }}
        body_path: changelog.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Calculate source archive SHA256 for Homebrew
      id: sha256
      run: |
        DOWNLOAD_URL="https://github.com/imhuso/cunzhi/archive/refs/tags/${{ github.ref_name }}.tar.gz"
        wget -O source.tar.gz "$DOWNLOAD_URL"
        SHA256=$(sha256sum source.tar.gz | cut -d' ' -f1)
        echo "sha256=${SHA256}" >> $GITHUB_OUTPUT
        echo "download_url=${DOWNLOAD_URL}" >> $GITHUB_OUTPUT

    - name: Update Homebrew Formula
      run: |
        VERSION="${{ github.ref_name }}"
        DOWNLOAD_URL="${{ steps.sha256.outputs.download_url }}"
        SHA256="${{ steps.sha256.outputs.sha256 }}"

        # 移除版本号前的 'v' 前缀
        VERSION_NUMBER=${VERSION#v}

        # 更新 Formula 文件
        sed -i "s|url \".*\"|url \"${DOWNLOAD_URL}\"|g" Formula/cunzhi.rb
        sed -i "s|sha256 \".*\"|sha256 \"${SHA256}\"|g" Formula/cunzhi.rb
        sed -i "s|version \".*\"|version \"${VERSION_NUMBER}\"|g" Formula/cunzhi.rb

    - name: Commit and push Formula update
      run: |
        VERSION="${{ github.ref_name }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # 检查是否有更改
        if git diff --quiet Formula/cunzhi.rb; then
          echo "No changes to Formula, skipping commit"
          exit 0
        fi

        # 确保我们在正确的分支上，使用token进行认证
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git fetch origin main
        git checkout main

        # 重新应用 Formula 更新（因为切换分支可能丢失更改）
        DOWNLOAD_URL="https://github.com/imhuso/cunzhi/archive/refs/tags/${VERSION}.tar.gz"
        SHA256=$(wget -qO- "$DOWNLOAD_URL" | sha256sum | cut -d' ' -f1)
        VERSION_NUMBER=${VERSION#v}

        sed -i "s|url \".*\"|url \"${DOWNLOAD_URL}\"|g" Formula/cunzhi.rb
        sed -i "s|sha256 \".*\"|sha256 \"${SHA256}\"|g" Formula/cunzhi.rb
        sed -i "s|version \".*\"|version \"${VERSION_NUMBER}\"|g" Formula/cunzhi.rb

        git add Formula/cunzhi.rb
        git commit -m "Update Homebrew formula to ${VERSION}"
        git push origin main
